name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform_plan_dev:
    name: 'Terraform Plan Dev'
    runs-on: ubuntu-latest
    #working-directory: downloads/lk
    if: github.event_name == 'push' || github.event_name != 'pull_request'
   

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="bucket=tf-state-githubactions" 
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        
    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION_DEV }}" 
        project="${{ vars.GCP_PROJECT_DEV }}" 
        data-project="${{ vars.GCP_DATA_PROJECT }}"
        EOF
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Terraform Plan
      run: |
        terraform plan -out="tf_plan.txt" -input=false
        
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}


    - name: Upload TF Plan
      uses: actions/upload-artifact@v2
      with:
        name: tf_plan
        path: tf_plan.txt
        if-no-files-found: error
        retention-days: 1


  terraform_apply_dev:
    name: 'Terraform Apply Dev'
    runs-on: ubuntu-latest
    needs: terraform_plan_dev
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: 'dev,staging,prod'

    steps: 
    - name: Checkout
      uses: actions/checkout@master
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      run: terraform init -backend-config="bucket=tf-state-githubactions" 
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    
    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION_DEV }}" 
        project="${{ vars.GCP_PROJECT_DEV }}" 
        data-project="${{ vars.GCP_DATA_PROJECT }}"
        EOF

    - name: Download TF Plan
      uses: actions/download-artifact@v2
      with:
        name: tf_plan
        path: tf_plan.txt


    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}